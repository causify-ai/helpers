Function Type,Script Path,Function Name,Lines,Docstring
Class,helpers/hasyncio.py,_EventLoop,52 – 84,An async_solipsism.EventLoop returning also the wall-clock time.
Function,helpers/hasyncio.py,_EventLoop.init,59 – 61,Initialize and set initial datetime.
Function,helpers/hasyncio.py,_EventLoop.get_current_time,63 – 84,Return datetime based on event loop time.
Function,helpers/hasyncio.py,solipsism_context,88 – 99,Context manager to isolate an `asyncio_solipsism` event loop.
Function,helpers/hasyncio.py,gather_coroutines_with_wall_clock,102 -117,Inject a wall clock associated to `event_loop` in all the coroutines and then gathers them in a single coroutine.
Function,helpers/hasyncio.py,run,122 – 148,"`asyncio.run()` wrapper that allows to use a specified `EventLoop`.
:param coroutine: the coroutine to run 
:param event_loop: the event loop to use. `None` means the standard `asyncio` event loop 
:param close_event_loop: if False the event loop is not closed, so that we can run multiple times in the same event loop :return: same output of `run_until_complete()`"
Function,helpers/hasyncio.py,_get_max_num_iterations,166 – 174,Calculate max number of iterations for polling.
Function,helpers/hasyncio.py,_poll_iterate,178 – 222,"Execute an iteration of the polling loop.
:return: the number of iterations executed and the output of the polling function (sucess, return value) 
:raises: TimeoutError in case of timeout"
Function,helpers/hasyncio.py,poll,226 – 264,"Call `polling_func()` every `sleep_in_secs` secs until the polling function returns success or there is a timeout. A timeout happens if no success is achieved within `timeout_in_secs` secs.
:param polling_func: function returning a tuple (success, value) :return: - number of iterations before a successful call to `polling_func` - result from `polling_func` 
:raises: TimeoutError in case of timeout"
Function,helpers/hasyncio.py,sync_poll,267 – 298,Same interface and behavior of `poll()` but using a synchronous implementation.
Function,helpers/hasyncio.py,get_poll_kwargs,301 – 316,Generate kwargs for polling.
Function,helpers/hasyncio.py,sleep,329 – 374,Wait a deterministic or a randomized delay.
Function,helpers/hasyncio.py,get_seconds_to_align_to_grid,380 – 412,"Given the current time return the amount of seconds to wait to align on a grid with period `bar_duration_in_secs`.
E.g., current_time=9:31:02am, bar_duration_in_secs=120 -> return 58
:param add_buffer_in_secs: number of seconds to add to make sure we are right after the grid time"
Function,helpers/hasyncio.py,_wait_until,415 – 453,"Return amount of seconds to wait for.
More accurate version of _wait_until, uses total_seconds() which allows for returning fractional second values."
Function,helpers/hasyncio.py,sync_wait_until,456 – 483,"Synchronous wait until a timestamp.

More accurate version of sync_wait_until allowing to wait for fractional seconds."
Function,helpers/hasyncio.py,async_wait_until,486 – 506,Async wait until a timestamp.
