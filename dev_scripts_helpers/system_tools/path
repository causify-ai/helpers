#!/usr/bin/env python

"""
Find a path in a directory and report the absolute path.

Usage:
    path.py <path> [<dir_name>]

If <dir_name> is provided, the path is searched in the directory.

Example:
# Look for a file in the current directory.
> path.py /Users/saggese/src/helpers1/dev_scripts_helpers/system_tools/path.py

# 
> path.py system_tools/path.py /Users/saggese/src/helpers2/dev_scripts_helpers/system_tools
"""

import glob
import os
import sys
from typing import Optional

# Abort on error if the path doesn't exist, or try to find the file with the same
# basename.
abort_on_error = False


def find_file(filename: str, *, search_path: str = ".") -> Optional[str]:
    # Recursive glob.
    search_path = os.path.join(search_path, "**", filename)
    files = glob.glob(search_path, recursive=True)
    if len(files) == 1:
        return files[0]
    elif len(files) > 1:
        msg = "Found multiple files with basename '%s' in directory '%s':\n%s" % (
            filename, search_path, "\n".join(files))
        raise RuntimeError(msg)
    else:
        return None


if __name__ == "__main__":
    assert len(sys.argv) in (2, 3), "Usage: path.py <path> [<dir_name>]"
    path = sys.argv[1]
    if len(sys.argv) == 3:
        dir_name = sys.argv[2]
    else:
        dir_name = "."
    # Make the path absolute.
    path_out = os.path.abspath(path)
    # If the path exists, print it and exit.
    if os.path.exists(path_out):
        print(path_out, end="")
        sys.exit(0)
    # If the path doesn't exist, abort.
    if abort_on_error:
        msg = "path '%s' doesn't exist in '%s'" % (path, dir_name)
        raise RuntimeError(msg)
    # Look for a file with the same basename in ``dir_name``.
    dir_name = os.path.abspath(dir_name)
    basename = os.path.basename(path)
    path_out = find_file(basename, search_path=dir_name)
    # If the file doesn't exist, abort.
    if path_out is None:
        msg = "path '%s' doesn't exist in '%s'" % (path, dir_name)
        raise RuntimeError(msg)
    # Print the path and exit.
    print(path_out, end="")
    sys.exit(0)