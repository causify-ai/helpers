name: Common Linter
on:
  workflow_call:
env:
  CSFY_CI: true
# Set up permissions for OIDC authentication.
permissions:
  # This is required for requesting the OIDC JWT.
  id-token: write
  # This is required for actions/checkout.
  contents: read
  # This is required for pulling the Docker image from GHCR.
  packages: read
  # This is required for posting the status of the job when triggered manually.
  statuses: write
jobs:
  Run_linter:
    # We expect user to not execute manual run in a draft PR.
    # The reason is `github.event.pull_request.draft` is evaluated as empty
    # string and the condition is always true which is not the right state.
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    steps:
      # To optimize costs, the image is fetched from GHCR registry by default.
      # If you prefer pulling the image from ECR, enable this.
      # # Pass AWS credentials via GH secrets. This is needed to pull the Docker
      # # image that will be used to run the action.
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: ${{ vars.GH_ACTION_AWS_ROLE_ARN }}
      #     role-session-name: ${{ vars.GH_ACTION_AWS_SESSION_NAME }}
      #     aws-region: ${{ vars.CSFY_AWS_DEFAULT_REGION }}

      # # # This is needed to pull the Docker image.
      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # This is needed to pull the Docker image.
      - name: Login to GHCR
        run: docker login ghcr.io -u gpsaggese -p ${{ secrets.GITHUB_TOKEN }}

      # Make everything accessible by any user to avoid permission errors.
      - name: Cleanup
        run: sudo chmod 777 -R .

      # Check out the code from GitHub so that we can run the action inside
      # the Docker container.
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          # The `lint` invoke target needs to have the full history of commits
          # in order to compare the current branch with the master branch.
          # The `0` means unlimited depth.
          fetch-depth: 0
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # To access modules in `amp` and `helpers_root`, make sure PYTHONPATH includes
      # them, just as it's set in `setenv.sh`.
      # TODO(Grisha): re-use the approach from `dev_scripts_cmamp/thin_client/setenv.sh`.
      - name: Update PYTHONPATH
        if: ${{ github.event.repository.name != 'helpers' }}
        run: echo "PYTHONPATH=.:helpers_root" >> $GITHUB_ENV

      # Install packages that are required to run the job via GH.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/gh_requirements.txt

      # Pull the `helpers:prod` image to run the Linter on it.
      - name: Pull Linter image
        env:
          CSFY_ECR_BASE_PATH: ghcr.io/causify-ai
        run: invoke docker_pull_helpers

      # Run the linter, then check if any file was changed after that. If so,
      # fail the job.
      - name: Check if the Linter was run
        env:
          # CSFY_ECR_BASE_PATH: ${{ vars.CSFY_ECR_BASE_PATH }}
          # CSFY_ECR_BASE_PATH is the source path for fetching the image.
          # If you prefer pulling the image from ECR, comment out the following
          # line and uncomment the one above.
          # TODO(Vlad): Rename the variable to CSFY_CR_BASE_PATH since it can be
          # either GHCR or ECR.
          CSFY_ECR_BASE_PATH: ghcr.io/${{ github.repository_owner }}
        # To run the linter, fetch the master branch for comparison with the
        # current branch.
        run: |
          invoke git_fetch_master
          invoke lint --branch
          invoke lint_check_if_it_was_run

      - name: Post status if triggered manually
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        uses: guibranco/github-status-action-v2@main
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: "Run_linter"
          description: 'Job is done (manual run)'
          state: ${{ job.status }}
          sha: ${{ github.sha }}
          target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
