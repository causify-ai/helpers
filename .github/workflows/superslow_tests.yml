name: Superslow tests
on:
  # Run manually.
  workflow_dispatch:
  schedule:
    # Run this everyday even if there are no commits.
    - cron:  '0 0 * * *'

env:
  CSFY_CI: true

# Set up permissions for OIDC authentication.
permissions:
  # This is required for requesting the OIDC JWT.
  id-token: write
  # This is required for actions/checkout.
  contents: read
  # This is required for pulling the Docker image from GHCR.
  packages: read

jobs:
  run_superslow_tests:
    runs-on: ubuntu-latest

    steps:
      # Pass AWS credentials via GH secrets. This is needed to pull the Docker
      # image and in case the tests need to access AWS resources.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.GH_ACTION_AWS_ROLE_ARN }}
          role-session-name: ${{ vars.GH_ACTION_AWS_SESSION_NAME }}
          aws-region: ${{ vars.CSFY_AWS_DEFAULT_REGION }}

      # # To optimize costs, the image is fetched from GHCR registry by default.
      # # This is needed to pull the Docker image.
      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      - name: Login to GHCR
        run: docker login ghcr.io -u gpsaggese -p ${{ secrets.GITHUB_TOKEN }}

      # Make everything accessible by any user to avoid permission errors.
      - name: Cleanup
        run: sudo chmod 777 -R .

      # Check out the code from GitHub so that we can run the action inside
      # the Docker container.
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: true
          token: ${{ secrets.GITHUB_TOKEN }}

      # To see the modules in `amp`, PYTHONPATH needs to include `amp` in the
      # same way we do in `setenv.sh`.
      - name: Update PYTHONPATH
        run: echo "PYTHONPATH=.:amp" >> $GITHUB_ENV

      # Install packages that are required to run the job via GH.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/gh_requirements.txt

      # # Pull the latest Docker image from the AWS ECR to run the regressions
      # # on.
      # - name: Pull image from AWS ECR
      #   env:
      #     CSFY_ECR_BASE_PATH: ${{ vars.CSFY_ECR_BASE_PATH }}
      #   run: invoke docker_pull

      # Pull the latest Docker image from the GHCR registry instead of ECR for
      # cost saving purposes to run the regressions on.
      - name: Pull image from GHCR
        run: docker pull ghcr.io/${{ github.repository }}:dev

      # Run the `invoke` target `run_superslow_tests` to run tests that are over
      # 30 seconds. See the corresponding documentation for more information.
      - name: Run superslow tests
        env:
          GH_ACTION_ACCESS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CSFY_AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          CSFY_AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          CSFY_AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          CSFY_AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          # CSFY_ECR_BASE_PATH: ${{ vars.CSFY_ECR_BASE_PATH }}
          # CSFY_ECR_BASE_PATH is the source path for fetching the image.
          # If you prefer pulling the image from ECR, comment out the following
          # line and uncomment the one above.
          # TODO(Vlad): Rename the variable to CSFY_CR_BASE_PATH since it can be
          # either GHCR or ECR.
          CSFY_ECR_BASE_PATH: ghcr.io/${{ github.repository_owner }}
          CSFY_AWS_S3_BUCKET: ${{ vars.CSFY_AWS_S3_BUCKET }}
        run: invoke run_superslow_tests

      # In case of manual run, this workflow step will not be skipped and
      # info in the step will be in format as seen in `with` statement.
      # Blank with no info and skipped otherwise.
      - name: Post status if was triggered manually
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        uses: Sibz/github-status-action@v1
        with:
          authToken: ${{ secrets.GITHUB_TOKEN }}
          context: "run_superslow_tests"
          description: 'Job is done (manual run)'
          state: ${{ job.status }}
          sha: ${{ github.sha }}
          target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      # Notify the team via Slack in case of failure.
      - name: Send Slack notification on failure
        # Need to use ref_name as it contains the branch that triggered the
        # workflow run.
        # Alternative, head_ref is only available when the event that triggers a
        # workflow run is either pull_request or pull_request_target.
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # You can pass in multiple channels to post to by providing a
          # comma-delimited list of channel IDs: 'CHANNEL_ID,ANOTHER_CHANNEL_ID'
          channel-id: ${{ vars.SLACK_BUILD_NOTIF_CHANNEL_ID }}
          slack-message: |
            ðŸ’£ SUPERSLOW TESTS FAILED
            Build failure '${{ github.workflow }}'
            Repo: '${{ github.repository }}'
            Branch: '${{ github.ref_name }}'
            Event: '${{ github.event_name }}'
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
