name: Common Run Tests
on:
    workflow_call:
        inputs:
          test-name:
            description: 'Name of the test to run. Example: run_fast_tests.'
            required: true
            type: string
env:
  CSFY_CI: true
  # CSFY_ECR_BASE_PATH: ${{ vars.CSFY_ECR_BASE_PATH }}
  # CSFY_ECR_BASE_PATH is the source path for fetching the image.
  # If you prefer pulling the image from ECR, comment out the following
  # line and uncomment the one above.
  # TODO(Vlad): Rename the variable to CSFY_CR_BASE_PATH since it can be
  # either GHCR or ECR.
  CSFY_ECR_BASE_PATH: ghcr.io/${{ github.repository_owner }}
# Set up permissions for OIDC authentication.
permissions:
  # This is required for requesting the OIDC JWT.
  id-token: write
  # This is required for actions/checkout.
  contents: read
  # This is required for pulling the Docker image from GHCR.
  packages: read
  # This is required for posting the status of the job when triggered manually.
  statuses: write
jobs:
  run_tests:
    # We expect user to not execute manual run in a draft PR.
    # The reason is `github.event.pull_request.draft` is evaluated as empty
    # string and the condition is always true which is not the right state.
    if: ${{ github.event.pull_request.draft == false }}
    runs-on: ubuntu-latest
    steps:
      # Pass AWS credentials via GH secrets. This is needed to pull the Docker
      # image and in case the tests need to access AWS resources.
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ vars.GH_ACTION_AWS_ROLE_ARN }}
          role-session-name: ${{ vars.GH_ACTION_AWS_SESSION_NAME }}
          aws-region: ${{ vars.CSFY_AWS_DEFAULT_REGION }}

      # # To optimize costs, the image is fetched from GHCR registry by default.
      # # If you prefer pulling the image from ECR, enable this.
      # - name: Login to AWS ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v1

      # This is needed to pull the docker image from GHCR.
      - name: Login to GHCR
        run: docker login ghcr.io -u gpsaggese -p ${{ secrets.GH_ACTION_ACCESS_TOKEN }}

      # Make everything accessible by any user to avoid permission errors.
      - name: Cleanup
        run: sudo chmod 777 -R .

      # Check out the code from GitHub so that we can run the action inside
      # the Docker container.
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
          token: ${{ secrets.GH_ACTION_ACCESS_TOKEN }}

      # To access modules in `amp` and `helpers_root`, make sure PYTHONPATH includes
      # them, just as it's set in `setenv.sh`.
      - name: Update PYTHONPATH
        run: |
          PYTHONPATH="$(realpath .)"
          # Add all submodule paths (recursively).
          SUBMODULES_PATHS=$(git submodule foreach --quiet --recursive 'echo $(pwd)' | paste -sd:)
          PYTHONPATH="$PYTHONPATH:$SUBMODULES_PATHS"
          # Export final PYTHONPATH to the environment.
          echo "PYTHONPATH=$PYTHONPATH" >> $GITHUB_ENV

      # Install packages that are required to run the job via GH.
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r .github/gh_requirements.txt

      # # Pull the latest Docker image from the AWS ECR to run the regressions
      # # on.
      # - name: Pull image from AWS ECR
      #   run: invoke docker_pull

      # Pull the latest Docker image from the GHCR registry instead of ECR for
      # cost saving purposes to run the regressions on.
      - name: Pull image from GHCR
        run: invoke docker_pull

      - name: Run tests
        env:
          CSFY_AWS_ACCESS_KEY_ID: ${{ env.AWS_ACCESS_KEY_ID }}
          CSFY_AWS_SECRET_ACCESS_KEY: ${{ env.AWS_SECRET_ACCESS_KEY }}
          CSFY_AWS_SESSION_TOKEN: ${{ env.AWS_SESSION_TOKEN }}
          CSFY_AWS_DEFAULT_REGION: ${{ env.AWS_DEFAULT_REGION }}
          CSFY_AWS_S3_BUCKET: ${{ vars.CSFY_AWS_S3_BUCKET }}
          GH_ACTION_ACCESS_TOKEN: ${{ secrets.GH_ACTION_ACCESS_TOKEN }}
        run: invoke ${{ inputs.test-name }}

      # In case of manual run, this workflow step will not be skipped and
      # info in the step will be in format as seen in `with` statement.
      # Blank with no info and skipped otherwise.
      - name: Post status if was triggered manually
        if: ${{ always() && github.event_name == 'workflow_dispatch' }}
        uses: guibranco/github-status-action-v2@main
        with:
          authToken: ${{ secrets.GH_ACTION_ACCESS_TOKEN }}
          context: ${{ inputs.test-name }}
          description: 'Job is done (manual run)'
          state: ${{ job.status }}
          sha: ${{ github.sha }}
          target_url: "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

      - name: Send Slack notification on failure
        # Need to use ref_name as it contains the branch that triggered the
        # workflow run.
        # Alternative, head_ref is only available when the event that triggers a
        # workflow run is either pull_request or pull_request_target.
        if: ${{ failure() && github.ref_name == 'master' }}
        uses: slackapi/slack-github-action@v1.27.0
        with:
          # You can pass in multiple channels to post to by providing a
          # comma-delimited list of channel IDs: 'CHANNEL_ID,ANOTHER_CHANNEL_ID'
          channel-id: ${{ vars.SLACK_BUILD_NOTIF_CHANNEL_ID }}
          slack-message: |
            ðŸ’£ ${{ inputs.test-name }} FAILED
            Build failure '${{ github.workflow }}'
            Repo: '${{ github.repository }}'
            Branch: '${{ github.ref_name }}'
            Event: '${{ github.event_name }}'
            https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
