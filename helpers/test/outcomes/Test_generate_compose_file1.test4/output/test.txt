stage='dev', use_privileged_mode=False, use_sibling_container=False, shared_data_dirs=None, mount_as_submodule=False, use_network_mode_host=True
version: '3'
services:
  base_app:
    cap_add:
      - SYS_ADMIN
    environment:
      - AM_ENABLE_DIND=0
      - AM_FORCE_TEST_FAIL=$AM_FORCE_TEST_FAIL
      - AM_REPO_CONFIG_CHECK=True
      - AM_REPO_CONFIG_PATH=
      - CK_AWS_ACCESS_KEY_ID=$CK_AWS_ACCESS_KEY_ID
      - CK_AWS_DEFAULT_REGION=$CK_AWS_DEFAULT_REGION
      - CK_AWS_PROFILE=$CK_AWS_PROFILE
      - CK_AWS_S3_BUCKET=$CK_AWS_S3_BUCKET
      - CK_AWS_SECRET_ACCESS_KEY=$CK_AWS_SECRET_ACCESS_KEY
      - CK_ECR_BASE_PATH=$CK_ECR_BASE_PATH
      - CK_TELEGRAM_TOKEN=$CK_TELEGRAM_TOKEN
      - GH_ACTION_ACCESS_TOKEN=$GH_ACTION_ACCESS_TOKEN
      - GH_TOKEN=$GH_ACTION_ACCESS_TOKEN
      - CI=$CI
    image: ${IMAGE}
    restart: 'no'
    volumes:
      - ~/.aws:/home/.aws
      - ~/.config/gspread_pandas/:/home/.config/gspread_pandas/
      - ~/.config/gh:/home/.config/gh
    network_mode: ${NETWORK_MODE:-host}
  app:
    extends: base_app
    volumes:
      - ../../:/app
  linter:
    extends: base_app
    volumes:
      - /app:/src
      - ../../:/app
    environment:
      - MYPYPATH
  jupyter_server:
    command: devops/docker_run/run_jupyter_server.sh
    environment:
      - PORT=${PORT}
    extends: app
    network_mode: ${NETWORK_MODE:-bridge}
    ports:
      - ${PORT}:${PORT}
  jupyter_server_test:
    command: jupyter notebook -h 2>&1 >/dev/null
    environment:
      - PORT=${PORT}
    extends: app
    network_mode: ${NETWORK_MODE:-bridge}
    ports:
      - ${PORT}:${PORT}